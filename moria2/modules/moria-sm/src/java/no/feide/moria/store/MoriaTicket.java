/*
 * Copyright (c) 2004 FEIDE
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 * 
 * $Id$
 */

package no.feide.moria.store;

import java.io.Serializable;

/**
 * This class represents the tickets used as identificators in Moria.
 * Each ticket has an unique key, a type and an assosiated service.
 * 
 * These attributes are used for the validation and authorization of incoming
 * requests.
 * 
 * @author Bjørn Ola Smievoll &lt;b.o@smievoll.no&gt;
 * @version $Revision$
 */
public final class MoriaTicket implements Serializable {

    /*
     * The ticket types, defined as constants.
     */
    public static final int LOGIN_TICKET = 1;
    public static final int SSO_TICKET = 2;
    public static final int PROXY_TICKET = 3;
    public static final int TICKET_GRANTING_TICKET = 4;

    /* Set once in the constructor */
    private final String ticketId;
    private final int ticketType;
    private final String servicePrincipal;

    /**
     * Construct a new ticket with autogenerated ticket id.
     * 
     * @param ticketType the type of ticket
     * @param servicePrincipal the id of the service this ticket relates to
     * @throws IllegalArgumentException if any of the arguments are null
     * @throws InvalidTicketTypeException if an illegal ticket type is
     *             specified
     */
    public MoriaTicket(int ticketType, String servicePrincipal)
        throws IllegalArgumentException, InvalidTicketTypeException {
        this(newId(), ticketType, servicePrincipal);
    }

    /**
     * Construct a new ticket with the given arguments.
     * 
     * @param ticketId a key identifying this ticket
     * @param ticketType the type of ticket
     * @param servicePrincipal the id of the service this ticket relates to
     * @throws IllegalArgumentException if any of the arguments are null
     * @throws InvalidTicketTypeException if an illegl ticket type is spesified
     */
    public MoriaTicket(String ticketId, int ticketType, String servicePrincipal)
        throws IllegalArgumentException, InvalidTicketTypeException {

        /* Sanity checks on inputs before assignment */
        if (ticketId == null)
            throw new IllegalArgumentException("ticketId cannot be null");

        this.ticketId = ticketId;

        if (ticketType < 1 || ticketType > 4)
            throw new InvalidTicketTypeException("The given ticket type is not valid. See constants defined in this class");

        this.ticketType = ticketType;

        if (servicePrincipal == null)
            throw new IllegalArgumentException("servicePrincipal cannot be null");

        this.servicePrincipal = servicePrincipal;
    }

    /**
     * Get the ticket identificator for a object.
     * 
     * @return the key identifying the ticket
     */
    public String getTicketId() {
        return ticketId;
    }

    /**
     * Get the the value of the ticket type of this ticket.
     * 
     * @return the type of ticket
     */
    public int getTicketType() {
        return ticketType;
    }

    /**
     * Get the value of the service principal assosiated with this ticket.
     * 
     * @return the service principal
     */
    public String getServicePrincipal() {
        return servicePrincipal;
    }

    /**
     * Creates an new key that can be used as an identificator for a ticket.
     * 
     * @return a new unique identificator
     */
    public static String newId() {
        return RandomId.newId();
    }

    /**
     * Equality is defined on basis of the ticketId value, same id same ticket.
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @return true if equal
     */
    public boolean equals(Object o) {
        return (o instanceof MoriaTicket && ((MoriaTicket) o).getTicketId().equals(this.ticketId));
    }

    /**
     * The hashcode is the hashcode of the ticketId String
     * 
     * @see java.lang.Object#hashCode()
     */
    public int hashCode() {
        return ticketId.hashCode();
    }
}
