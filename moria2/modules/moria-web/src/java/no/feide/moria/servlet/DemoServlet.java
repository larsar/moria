/*
 * Copyright (c) 2004 UNINETT FAS
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * $Id$
 */

package no.feide.moria.servlet;

import no.feide.moria.log.MessageLogger;
import no.feide.moria.webservices.v1_0.Attribute;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.namespace.QName;
import javax.xml.rpc.ParameterMode;
import javax.xml.rpc.ServiceException;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;

import org.apache.axis.client.Call;
import org.apache.axis.encoding.ser.VectorDeserializerFactory;
import org.apache.axis.encoding.ser.VectorSerializerFactory;

/**
 * This is a simple demonstration servlet, primarily intended as a code example
 * on how to access the Moria SOAP interface. <br>
 * <br>
 * This implementation uses Axis for its remote operations; for details on how
 * this is done refer to the private methods
 * <ul>
 * <li><code>initiateAuthentication</code>
 * <li><code>getUserAttributes</code>
 * </ul>
 * These methods mirror the server-side SOAP methods published by the Moria
 * instance, but are not generated by Axis' SOAP tools (WSDL2Java). For details
 * on how to implement client-side methods using other SOAP implementations than
 * Axis (such as Sun's JAX-RPC) or other programming languages, please refer to
 * the documentation for the SOAP implementation/library in question. <br>
 * <br>
 * The servlet works as follows: <br>
 * <ol>
 * <li>If the HTTP request does not contain a service ticket (found by checking
 * URL parameter <code>PARAM_TICKET</code>) the user is redirected to a Moria
 * instance (given by <code>SERVICE_ENDPOINT</code>) for authentication. <br>
 * This is done using the <code>initiateAuthentication(...)</code> method to
 * receive a correct redirect URL to the Moria instance.
 * <li>Once the user has gone through a successful authentication, he or she is
 * redirected back to this servlet, now with the previously missing service
 * ticket.
 * <li>The servlet then attempts to read the attributes requested by the
 * earlier use of <code>initiateAuthentication(...)</code>, by using
 * <code>getUserAttributes(...)</code> with the given service ticket.
 * <li>If successful, the attributes and their values are then displayed.
 * </ol>
 * A few other points to note:
 * <ul>
 * <li>The attributes requested are given by <code>ATTRIBUTE_REQUEST</code>.
 * <li>This servlet, as a Moria client service, authenticates itself to Moria
 * using the username/password combination given by <code>CLIENT_USERNAME</code>
 * and <code>CLIENT_PASSWORD</code>.
 * <li>The Moria instance used is given by <code>SERVICE_ENDPOINT</code>.
 * </ul>
 * @see #initiateAuthentication(String[], String, String, boolean)
 * @see #getUserAttributes(String)
 * @see #PARAM_TICKET
 * @see #SERVICE_ENDPOINT
 * @see #ATTRIBUTE_REQUEST
 * @see #CLIENT_USERNAME
 * @see #CLIENT_PASSWORD
 * @see #SERVICE_ENDPOINT
 */
public class DemoServlet
extends HttpServlet {

    // TODO: Read configuration from file to allow for flexible deployment.
    
    /** Used for logging. */
    private final MessageLogger log = new MessageLogger(DemoServlet.class);

    /**
     * The attribute request. <br>
     * <br>
     * Currently requesting <i>eduPersonOrgDN </i> and <i>eduPersonAffiliation
     * </i>.
     */
    private final String[] ATTRIBUTE_REQUEST = {"eduPersonOrgDN", "eduPersonAffiliation"};
    //private final String[] ATTRIBUTE_REQUEST = {"eduPersonAffiliation"};

    /**
     * The service endpoint. <br>
     * <br>
     * Current value is
     * <code>"http://localhost:8080/moria/v1_0/Authentication"</code>.
     */
    private final String SERVICE_ENDPOINT = "http://localhost:8080/moria/v1_0/Authentication";
    //private final String SERVICE_ENDPOINT = "https://moria.uio.no/moria2/v2_0/Authentication";

    /**
     * Name of the URL parameter used to retrieve the Moria service ticket. <br>
     * <br>
     * Current value is <code>"ticket"</code>.
     */
    private final String PARAM_TICKET = "ticket";

    /**
     * The username used by this demo service when accessing Moria. <br>
     * <br>
     * Current value is <code>"test"</code>.
     */
    private final String CLIENT_USERNAME = "test";
    //private final String CLIENT_USERNAME = "demo";

    /**
     * The password used by this demo service when accessing Moria. <br>
     * <br>
     * Current value is <code>"test"</code>.
     */
    private final String CLIENT_PASSWORD = "test";
    //private final String CLIENT_PASSWORD = "demo";

    /**
     * Used when mapping the remote <code>Attribute</code> type to the local
     * <code>Attribute</code> class.
     */
    private final QName ATTRIBUTE_QNAME = new QName("https://login.feide.no/moria/v1_0/Authentication", "Attribute");
    //private final QName ATTRIBUTE_QNAME = new QName("https://login.feide.no/moria/v2_0/Authentication", "Attribute");


    /**
     * Handles the GET requests.
     * @param request
     *            The HTTP request object. If it contains a request parameter
     *            <i>moriaID </i> then the request's attribute <i>attributes
     *            </i> will be filled with the attributes contained in the
     *            session given by <i>moriaID </i>.
     * @param response
     *            The HTTP response object.
     * @throws java.io.IOException
     *             If an input or output error is detected when the servlet
     *             handles the GET request.
     * @throws javax.servlet.ServletException
     *             If the request for the GET could not be handled.
     * @see javax.servlet.http.HttpServlet.doGet(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    public final void doGet(final HttpServletRequest request, final HttpServletResponse response)
    throws IOException, ServletException {

        // Be sure to dump all exceptions.
        try {
        
	        // Do we have a ticket?
	        String ticket = request.getParameter(PARAM_TICKET);
	        if (ticket == null) {
	
	            // No ticket; redirect for authentication.
	            String redirectURL = initiateAuthentication(ATTRIBUTE_REQUEST, request.getRequestURL().toString() + "?" + PARAM_TICKET + "=", "", true);
	            response.sendRedirect(redirectURL);
	
	        } else {
	
	            // We have a ticket; get and display attributes.
	            Attribute[] attributes = getUserAttributes(ticket);
	            PrintWriter out = response.getWriter();
	            out.println("<html><body>");
	            out.println("<table align=\"center\"><tr><td><b>Attribute Name</b></td><td><b>Attribute Value(s)</b></td></tr>");
	            for (int i = 0; i < attributes.length; i++) {
	                String name = attributes[i].getName();
	                out.println("<tr><td>" + name + "</td>");
	                String[] values = attributes[i].getValues();
	                for (int j = 0; j < values.length; j++) {
	                    if (j > 0)
	                        out.println("<tr><td></td>");
	                    out.println("<td>" + values[j] + "</td></tr>");
	                }
	            }
	            out.println("</table>");
	            out.println("</html></body>");
	
	        }
	        
        } catch (ServiceException e) {
            log.logCritical("ServiceException caught", e);
            throw new ServletException(e);
        } catch (RemoteException e) {
            log.logCritical("RemoteException caught", e);
            throw new ServletException(e);
        }

    }


    /**
     * Initiates an authentication session, hiding any Axis internals from the
     * developer.
     * @param attributeRequest
     *            The attribute request.
     * @param urlPrefix
     *            The prefix of the URL where the user will be redirected back
     *            to after successful authentication.
     * @param urlPostfix
     *            The postfix of the URL where the user will be redirected back
     *            to after successful authentication. The resulting return URL
     *            will be <code>"urlPrefix<i>moriaID</i>urlPostfix"</code>,
     *            where <i>moriaID </i> is the session ID given to this
     *            authentication attempt. This ID should be used after
     *            authentication to retrieve the attributes requested through
     *            <code>attributeRequest</code>.
     * @param denySSO
     *            <code>true</code> to disallow use of SSO, otherwise
     *            <code>false</code>.
     * @return An URL to the login page for Moria, to which the user should be
     *         redirected.
     * @throws ServiceException
     *             If unable to create the service call.
     * @throws MalformedURLException
     *             If the constant <code>SERVICE_ENDPOINT</code> contains an
     *             illegal URL.
     * @throws RemoteException
     *             If an exception was thrown by the remote service.
     * @see #SERVICE_ENDPOINT
     */
    private String initiateAuthentication(final String[] attributeRequest, final String urlPrefix, final String urlPostfix, final boolean denySSO)
    throws ServiceException, MalformedURLException, RemoteException {

        // Preparing call.
        Call call = new Call(new URL(SERVICE_ENDPOINT + "?WSDL"));
        call.setUsername(CLIENT_USERNAME);
        call.setPassword(CLIENT_PASSWORD);
        final Object[] parameters = {ATTRIBUTE_REQUEST, urlPrefix, urlPostfix, new Boolean(false)};

        // Performing call.
        return (String) call.invoke(new QName("initiateAuthentication"), parameters);

    }


    /**
     * Get the previously requested (through
     * <code>initiateAuthentication(...)</code> attributes following a
     * successful user authentication.
     * @param serviceTicket
     *            A legal service ticket returned to the client service
     *            following a successful authentication on the user's part.
     * @return An array of <code>Attribute</code> objects, containing the
     *         resulting values of the original attribute request. Note that if
     *         the requested attributes does not exist, or if the client service
     *         is not authorized to read the attributes, they will not be
     *         returned. May consequently return an empty array, but never
     *         <code>null</code>.
     * @throws MalformedURLException
     *             If the URL given by <code>SERVICE_ENDPOINT + "?WSDL</code>
     *             is illegal.
     * @throws RemoteException
     *             If the remote call failed for some reason.
     * @see #initiateAuthentication(String[], String, String, boolean)
     */
    private Attribute[] getUserAttributes(String serviceTicket)
    throws MalformedURLException, RemoteException {

        // Prepare call.
        Call call = new Call(new URL(SERVICE_ENDPOINT + "?WSDL"));
        call.setUsername(CLIENT_USERNAME);
        call.setPassword(CLIENT_PASSWORD);
        call.setReturnType(ATTRIBUTE_QNAME);
        VectorSerializerFactory serializer = new VectorSerializerFactory(Attribute.class, ATTRIBUTE_QNAME);
        VectorDeserializerFactory deserializer = new VectorDeserializerFactory(Attribute.class, ATTRIBUTE_QNAME);
        call.registerTypeMapping(Attribute.class, ATTRIBUTE_QNAME, serializer, deserializer);
        call.addParameter("serviceTicket", new QName("http://www.w3.org/2001/XMLSchema", "string"), String.class, ParameterMode.IN);
        final Object[] parameters = {serviceTicket};

        // Perform the call.
        Object attributes = call.invoke(new QName(SERVICE_ENDPOINT, "getUserAttributes"), parameters);

        // Convert return attribute array.
        return (Attribute[]) attributes;

    }
}