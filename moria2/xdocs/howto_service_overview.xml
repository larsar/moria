<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2004 UNINETT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.

$Id$
-->
<document>
	<properties>
		<title>Service Integration</title>
		<author email="cato.olsen@uninett.no">Cato Olsen</author>
	</properties>
	<body>
		<section name="Service Integration">
			<p>
                Welcome to the Moria2 Service Integration guide. This guide
                consists of several chapters, which can be read from start
                to end as a tutorial, or used as a quick reference.
            </p>
            <p>
                The various chapters can be found in the navigation menu to the
                left.
            </p>
            
            <subsection name="Overview and Technologies">
                <p>
                    First off, let us give a brief run-down on the various
                    technologies and terms used throughout this guide.
                </p>
                <p>
                    <b>Moria2</b> is the name of the central authentication
                    system described on this site. Its main responsibilities
                    are to perform user authentication, and to relay
                    information about the authenticated user (<b>user attributes</b>)
                    to third-party services. The actual autorization is done
                    entirely by the third-party service based on these user
                    attributes.
                </p>
                <p>
                    A <b>service</b> provides some form of protected content,
                    or service, to end users - relying on Moria2 to perform the
                    necessary authentication. User attributes are passed on
                    from Moria2 to the service. In order to use Moria2, each
                    service needs a registered <b>service account</b>, which
                    basically describes what the service is allowed to do (which
                    attributes it can read, and so forth). If you are
                    considering integrating your service with a particular
                    Moria2 instance, the Moria2 administrator should be able to
                    provide you with the proper service account.
                </p>
                <p>
                    User attributes are not stored in the Moria2 system itself,
                    but on a number of <b>authentication servers</b>. Each
                    authentication server belongs to an <b>organization</b>
                    responsible for maintaining the local authentication
                    server and its content. This is transparent to the service,
                    which need only relate to Moria2.
                </p>
                <p>
                    The communication between Moria2 and a service takes place
                    over ordinary
                    <a href="http://www.w3.org/Protocols/">HTTPS</a>, using a
                    message format called <a href="http://www.w3.org/TR/soap/">Simple Object Access Protocol</a>,
                    or <b>SOAP</b>. The interface to Moria2 is described using
                    <a href="http://www.w3.org/TR/wsdl">Web Services Definition Language</a>, 
                    or <b>WSDL</b>. There are other details to this communication (<a href="http://java.sun.com/xml/jaxrpc/index.jsp">JAX-RPC</a>
                    conformance;  <a href="http://www.ws-i.org/">WS-I Basic Profile</a>
                    conformance) that are well beyond the scope of this guide.
                </p>
                <p>
                    In almost every case, service developers do not need to
                    handle SOAP directly. Instead, a client SOAP library is
                    used to generate <b>stubs</b> from the WSDL. These stubs
                    are then used by the application, hiding the details of
                    SOAP behind a convenient API. Several client libraries exist
                    for various programming languages; the Moria2 project uses <a href="http://ws.apache.org/axis/">Axis</a>
                    for its server- and client-side implementations but any one
                    will do. Please refer to your chosen library for more
                    information.
                </p>
                <p>
                    The Moria2 project also provides a small, but growing number
                    of ready-to-use client libraries, under the common name <b>Mellon2</b>.
                    These should be considered unsupported example code for use
                    at your own risk; the official interface to Moria2 is the
                    WSDL itself, and the proper way to use Moria2 is to generate
                    your own stubs.
                </p>
                <p>
                    If you wish to start integrating your service with an
                    operational Moria2 installation right away, you may <a href="howto_service_feide.html">jump to the chapter</a>
                    describing the Moria2 installation run by <a href="http://www.feide.no">FEIDE</a>.
                    Otherwise choose a chapter from the navigation menu on your
                    left.
                </p>
            </subsection>
			
		</section>
	</body>
</document>
