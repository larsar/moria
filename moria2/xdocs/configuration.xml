<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2004 UNINETT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.

$Id$
-->
<document>
    <properties>
        <title>Configuration</title>
        <author email="cato.olsen@uninett.no">Cato Olsen</author>
    </properties>
    <body>
        <section name="Introduction">
            <p>
            Moria is software for providing authentication over HTTP using
            multiple directory backends. The software is designed with a servlet
            frontend both to the service provider and the user; the service
            frontend is SOAP based, and HTML is used for the interactive user
            interface.
            </p>
            <p>
            The system design is described in detail in the
            <a href="design.html">design document</a>.
            </p>
            <p>
            This document describes the configuration and setup of Moria
            from scratch.
            </p>
        </section>
        <section name="Presentation">
            <p>
            JSP is used for the user login and logout page and Moria ships with
            standard versions of both. In addition there's a number of other
            JSPs used. These standard files are contained in the
            <code>src/webapp/WEB-INF/jsp</code> directory of the Web Module.
            </p>
            <p>
            There are two ways of replacing the standard JSPs. One can either
            replace the files when building the war or additionally add some new
            JSPs and provide a customized <code>web.xml</code> where the servlet
            definitions for the JSPs are redefined.
            </p>
            <p>
            A property named <code>project.alternative.jsp.location</code> will be
            used as source directory for JSP files if defined. All
            <code>*.jsp</code> files in this location will end up in the
            <code>jsp</code> directory in the resulting WAR file. For ways to
            replace the default <code>web.xml</code> file please see the
            <a href="http://maven.apache.org/reference/plugins/war/">Maven WAR Plugin</a>
            documentation.
            </p>
            <p>
            When replacing the JSPs one may also want to replace the language
            files. This can be done by redefining the property
            <code>project.resourcebundle.dir</code>, pointing it to a directory
            with replacement bundles.
            </p>
        </section>
        <section name="Base Configuration">
            <p>
            Moria is dependent on three inital properties which has to be
            specified as system properties in the VM (or classloader, if your
            application server supports this functionality). The three are:
            </p>
            <ol>
                <li>
                <pre>no.feide.moria.configuration.base</pre>
                Should point to the Configuration Manager's base property file.
                Example:
                <pre>no.feide.moria.configuration.base=/full/path/base.properties</pre>
                </li>
                <li>
                <pre>Dno.feide.moria.store.nodeid</pre>
                The JBossCache node ID for this instance. A unique (in the
                JBossCache cluster's context; see the 
                <a href="#Store Manager">Store Manager</a> section) 
                three-character alphanumeric string. Example:
                <pre>Dno.feide.moria.store.nodeid=xy1</pre>
                </li>
                <li>
                <pre>log4j.configuration</pre>
                Log4j's configuration file (optional). Example:
                <pre>log4j.configuration=/full/path/log4j.xml</pre>
                </li>
            </ol>
            <p>
            The last property may be considered optional as log4j on
            initialization has its own regime of locating its configuration, but
            this is the preferred way to do it when using Moria.
            </p>
            <p>
            This example starts <a href="http://www.caucho.com/">Resin</a> with
            the required properties:
            </p>
            <source>
$ cd $RESIN_HOME/bin
$ httpd \
> -Dno.feide.moria.configuration.base=/config/base.properties \
> -Dno.feide.moria.store.nodeid=007
            </source>
        </section>
        <section name="Configuration Manager">
            <p>
            The Configuration Manager reads and watches the configuration files
            for all modules. When a module's configuration file is changed, the
            Configuration Manager pushes the updated configuration to the
            relevant module. Configuration files for all modules can be changed
            during runtime without restart of Moria, but changes in the base
            configuration (that is, the Configuration Manager's config file)
            requires a full restart of Moria.
            </p>
            <p>
            All file paths can be given as a full path or relative to the
            location of the base configuration file.
            </p>
            <p>
            Example Configuration Manager configuration file:
            </p>
            <source>
# Number of seconds between polling the various configuration files (below).
no.feide.moria.configuration.fileListenerIntervalSeconds=1

# Path to the store manager's configuration file.
no.feide.moria.configuration.sm=/full/path/sm.properties

# Path to the directory manager's configuration file.
no.feide.moria.configuration.dm=/full/path/dm.properties

# Path to the authorization manager's configuration file.
no.feide.moria.configuration.am=../relative/path/am.xml

# Path to the web module's configuration file.
no.feide.moria.configuration.web=../relative/path/web.properties
            </source>
        </section>
        <section name="Web Module">
            <p>
            The Web Module's configuration contains settings (such as language
            and cookie information) used by the various servlets that represents
            Moria. The most important servlets are the login and logout
            servlets, the Axis servlet (which handles the SOAP interface of
            Moria) and a few utility type servlets, such as the demo servlet and
            the information servlet.
            </p>
            <p>
            It is important that there exist a language bundle for the default
            language; otherwise the the login and logout servlet will fail
            whenever they try to use this default language.
            </p>
            <subsection name="Core Properties">
                <p>
                The core properties required for Moria are as follows:
                </p>
                <ul>
                    <li>
                    <code>no.feide.moria.web.login.url_prefix</code>
                    <p>
                    The URL of the login servlet itself. The example file below
                    assumes Moria is deployed locally.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.logout.url_param</code>
                    <p>
                    The name of the parameter used to contain the redirect URL
                    when logging out.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.lang_common</code>
                    <p>
                    A comma-separated list of abbreviations and HTML display
                    names for available languages. The list elements themselves
                    consists of a two-character language code (consistency is
                    required throughout the various configuration files, such as
                    the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    file), a colon, and the HTML display name. The example file
                    below configures Norwegian (bokmål) and English.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.org_<i>XX</i></code>
                    <p>
                    These properties contain a comma-separated list of
                    organization names to display when using the language with
                    two-character code <i>XX</i>. The list elements themselves
                    consist of a unique organization name (consistency is
                    required throughout the various configuration files, such as
                    the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    file), a colon, and the HTML display name. The example file
                    below configures Norwegian (bokmål) and English for one
                    imaginary organization.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.login.ticket_param</code>
                    <p>
                    The name of the URL parameter containing the Moria ticket
                    ID.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.denysso.name</code>
                    <p>
                    The name of the cookie used to disallow SSO, if so chosen by
                    the user.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.denysso.ttl</code>
                    <p>
                    The time to live, in hours, for the cookie used to disallow
                    SSO.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.sso.name</code>
                    <p>
                    The name of the cookie used to carry SSO ticket ID.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.sso.ttl</code>
                    <p>
                    The time to live, in hours, for the cookie used to carry SSO
                    ticket ID.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.lang.name</code>
                    <p>
                    The name of the cookie used to store the user's preferred
                    language.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.login.default_language</code>
                    <p>
                    The default Moria language, which should match one of the 
                    two-letter language abbreviations already defined. The
                    example file below will use English.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.org.name</code>
                    <p>
                    The name of the cookie used to store a user's previously
                    selected organization.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.cookie.org.ttl</code>
                    <p>
                    The time to live, in hours, for the cookie used to store the 
                    user's previously selected organization.
                    </p>
                    </li>           
                </ul>
            </subsection>
            <subsection name="Demo Servlet Properties">
                <p>
                The following properties are exclusively used by the demo
                servlet, but are required nonetheless:
                </p>
                <ul>
                    <li>
                    <code>no.feide.moria.web.demo.attributeNamespaceURI</code>
                    <p>
                    Used to construct the QName for mapping "remote"
                    <code>Attribute</code> type to a local type. Although the
                    demo servlet is not "remote" as such, it accesses Moria
                    through SOAP just as any other Moria client application,
                    thus requiring this mapping.
                    <!--
                    TODO: Remove reference to login.feide.no and update DemoServlet.
                    -->
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.serviceEndpoint</code>
                    <p>
                    The service endpoint. The example file below assumes Moria
                    is deployed locally, and will use version 2.0 of the SOAP
                    interface.
                    </p> 
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.master.attributeRequest</code>
                    <p>
                    A comma-separated list of attributes requested by the master
                    (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a "service") demo service. The example file
                    below will cause the demo servlet to request the attributes
                    <i>someAttribute</i> as well as the virtual (meaning it
                    doesn't exist physically in the actual user element)
                    attribute <i>tgt</i>, which is the ticket granting ticket.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.master.username</code>
                    <p>
                    The username used by the demo servlet to access Moria as a
                    master (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a "service") client service. The application
                    server's user database must be configured accordingly.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.master.password</code>
                    <p>
                    The password used by the demo servlet to access Moria as a
                    master (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a "service") client service. The application
                    server's user database must be configured accordingly.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.slave.attributeRequest</code>
                    <p>
                    A comma-separated list of attributes requested by the slave
                    (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a subservice) demo service. The example file
                    below will cause the demo servlet to request the attribute
                    <i>anotherAttribute</i>.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.slave.username</code>
                    <p>
                    The username used by the demo servlet to access Moria as a
                    slave (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a "subservice") client service. The
                    application server's user database must be configured
                    accordingly.
                    </p>
                    </li>
                    <li>
                    <code>no.feide.moria.web.demo.slave.password</code>
                    <p>
                    The password used by the demo servlet to access Moria as a
                    slave (in the
                    <a href="#Authorization Manager">Authorization Manager</a>
                    referred to as a "subservice") client service. The
                    application server's user database must be configured
                    accordingly.
                    </p>
                    </li>
                </ul>
            </subsection>
            <p>     
            Example Web Module configuration file:
            </p>
            <source>
#
# Configuration properties for Moria itself:
#

# The URL of the login servlet.
no.feide.moria.web.login.url_prefix=http://localhost:8080/moria/Login

# The name of the parameter used to contain the redirect URL when logging out.
no.feide.moria.web.logout.url_param=redirUrl

# Abbreviations and display names for available languages.
no.feide.moria.web.lang_common=nb:Bokm&amp;aring;l,en:English

# Organization names when using the language EN.
no.feide.moria.web.org_en=my.org:My Organization

# Organization names when using the language NB.
no.feide.moria.web.org_nb=my.org:Min organisasjon

# Name of URL parameter containing the Moria ticket ID.
no.feide.moria.web.login.ticket_param=moriaID

# Name of cookie used to disallow SSO.
no.feide.moria.web.cookie.denysso.name=MoriaDenySSOCookie

# Time to live, in hours, for cookie used to disallow SSO.
no.feide.moria.web.cookie.denysso.ttl=1

# Name of cookie used to carry SSO ticket ID.
no.feide.moria.web.cookie.sso.name=MoriaSSOCookie

# Time to live, in hours, for cookie used to carry SSO ticket ID.
no.feide.moria.web.cookie.sso.ttl=1

# Name of cookie used to store user's preferred language.
no.feide.moria.web.cookie.lang.name=MoriaUserLanguageCookie

# Time to live, in hours, for cookies used to store user's preferred language.
no.feide.moria.web.cookie.lang.ttl=1

# Default Moria language.
no.feide.moria.web.login.default_language=en

# Name of cookie used to store user's previously selected organization.
no.feide.moria.web.cookie.org.name=MoriaUserOrganizationCookie

# Time to live, in hours, for cookies used to store user's previously selected organization.
no.feide.moria.web.cookie.org.ttl=1


#
# Configuration properties relevant for the demo service (DemoServlet):
#

# Used to construct the QName for mapping remote Attribute type to local type.
no.feide.moria.web.demo.attributeNamespaceURI=https://login.feide.no/moria/v2_0/Authentication

# The service endpoint.
no.feide.moria.web.demo.serviceEndpoint=http://localhost:8080/moria/v2_0/Authentication

# A comma-separated list of attributes requested by the main service.
no.feide.moria.web.demo.master.attributeRequest=someAttribute,tgt

# The username used by DemoServlet to access Moria as a main service.
no.feide.moria.web.demo.master.username=demo_service

# The password used by DemoServlet to access Moria as a main service.
no.feide.moria.web.demo.master.password=demo_service

# A comma-separated list of attributes requested by the subservice.
no.feide.moria.web.demo.slave.attributeRequest=anotherAttribute

# The username used to access Moria as a subservice.
no.feide.moria.web.demo.slave.username=demo_subsystem

# The password used to access Moria as a subservice.
no.feide.moria.web.demo.slave.password=demo_subsystem
            </source>
        </section>
        <section name="Authorization Manager">
            <p>
            The Authorization Manager is configured by an XML file which
            contains a <i>ClientAuthorizationConfig</i> element, which in turn
            contains a <i>Client</i> element for every client service allowed to
            use Moria.
            </p>
            <p>
            The actual service authentication is performed outside of Moria (by
            the application server) so password and/or certificates must be
            configured in the server that performs the authentication (for
            example, <a href="http://httpd.apache.org/">Apache</a> or
            <a href="http://www.caucho.com/">Resin</a>).
            </p>
            <!--
            TODO: NEED AN UPDATE! 
            <p><a href="authorization.dtd">DTD for the authorization configuration file</a>.</p>
            -->
            <p>
            A <i>Client</i> element consists of the following:
            <ol>
                <li>
                A required <i>name</i> attribute which is identical to the
                principal used for the client service's external authentication.
                </li>
                <li>
                A <i>DisplayName</i> child element with a text child element
                containing the full name of the client service. This is the
                service name that is presented on the login page.
                </li>
                <li>
                An <i>URL</i> child element with a text child element containing
                an URL pointing to the main page of the client service. This URL
                is used to connect a link from the displayed client service name
                (on the login page) to a page where the client service may
                describe itself to the user.                
                </li>
                <li>
                A <i>Home</i> child element with a text child element that
                specifies which organization the client service belongs to. The
                short-form organization names should be consistent with
                short-form organization names appearing elsewhere in other
                configuration files, such as the <a href="#Web Module">Web
                Module</a> configuration file.
                <i>Not currently used.</i>
                <!--
                TODO: Is this actually not used?
                -->
                </li>
                <li>
                A <i>Language</i> child element with a text child element that
                gives the default language used on the web interfaces (such as
                the login web page) for this client service. This language will
                be used as the default language for the login page if the user
                has not previously selected another language. If not present the
                system-wide Moria default language will be used instead. Note
                that this two-character language code must match one of the
                two-character language codes defined in the
                <a href="#Web Module">Web Module</a> configuration file.
                </li>
                <li>
                An <i>Affiliation</i> child element containing one or more
                <i>Organization</i> child elements, which again contain a text
                child element. The text child element should match the
                short-form organization names defined in the
                <a href="#Web Module">Web Module</a> configuration file. Users
                belonging to one of these affiliated organizations may be
                authenticated against a secondary (or tertiary, and so on)
                authentication server (or location within the same
                authentication server) when using this service. This allows an
                organization to publish a service for which only a certain set
                of users may be authenticated without allowing these users to
                access other services (unless their organization is also
                affiliated with these services, of course).
                <!--
                TODO: Remember to update this description as the intended functionality is added.
                -->
                </li>
                <li>
                An <i>OrgsAllowed</i> child element containing one or more
                <i>Organization</i> child elements, which again contain a text
                child element. The text child element should match the
                short-form organization names defined in the
                <a href="#Web Module">Web Module</a> configuration file. Users
                belonging to one of these allowed organizations may access this
                client service; others cannot.
                </li>
                <li>
                An <i>Attributes</i> child element containing one or more
                <i>Attribute</i> child elements. The <i>Attribute</i> child
                element(s) contain the attributes <i>name</i> (gives the
                physical name of a physical user attribute the client service is
                allowed to read), <i>sso</i> (true or false; tells whether the
                client service is allowed to read this attribute when using
                SSO), and <i>secLevel</i> (used to classify an attribute request
                according to security level and optionally display a
                warning/description to the user on the login page). Note that
                for a client service to be allowed a ticket granting ticket the
                configuration must be allowed to read the <i>tgt</i> attribute
                and use it for SSO.
                </li>
                <li>
                The <i>Operations</i> child element contains one or more
                <i>Operation</i> child elements for those operations the client
                service is allowed to perform. The <i>Operation</i> child
                element has an attribute <i>name</i> specifying the allowed
                operation's name. The following operations are defined:
                <table>
                    <tr>
                        <th>Operation</th>
                        <th>Explanation</th>
                    </tr>
                    <tr>
                        <td><i>InteractiveAuth</i></td>
                        <td>Allow normal interactive authentication.</td>
                    </tr>
                    <tr>
                        <td><i>DirectAuth</i></td>
                        <td>Allow the user's username/password to be sent
                            through the client service. Handle with care, as
                            this is a potential security pitfall.</td>
                    </tr>
                    <tr>
                        <td><i>ProxyAuth</i></td>
                        <td>Allows a subsystem to perform user authentication
                            using a proxy ticket.</td>
                    </tr>
                    <tr>
                        <td><i>VerifyUserExistence</i></td>
                        <td>Allows the client service to check whether a given
                            user actually exists.</td>
                    </tr>
                </table>
                </li>
                <li>
                The <i>Subsystems</i> child element contains a
                <i>Subsystem</i> child element for every secondary client
                service the primary client service is allowed to use proxy
                authentication in cooperation with (that is, which secondary
                client service(s) are allowed to make use of proxy tickets
                issued to the primary client service). Each
                secondary client service must be configured to be allowed to use
                the operation <i>ProxyAuth</i>.
                </li>
            </ol>
            </p>
            <p>
            Example Authorization Manager configuration file:
            </p>
            <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;ClientAuthorizationConfig&gt;
    &lt;Client name="test"&gt;
        &lt;DisplayName&gt;Foobar&lt;/DisplayName&gt;
        &lt;URL&gt;http://www.feide.no/&lt;/URL&gt;
        &lt;Home&gt;uio.no&lt;/Home&gt;
        &lt;Language&gt;no&lt;/Language&gt;
        &lt;Affiliation&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/Affiliation&gt;
        &lt;OrgsAllowed&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
       &lt;/OrgsAllowed&gt;        
        &lt;Attributes&gt;
            &lt;Attribute name="attr1" sso="true" secLevel="0"/&gt;
            &lt;Attribute name="attr2" sso="true" secLevel="1"/&gt;
            &lt;Attribute name="attr3" sso="false" secLevel="2"/&gt;
            &lt;Attribute name="tgt" sso="false" secLevel="0"/&gt;
        &lt;/Attributes&gt;
        &lt;Operations&gt;
            &lt;Operation name="DirectAuth"/&gt;
            &lt;Operation name="InteractiveAuth"/&gt;
            &lt;Operation name="VerifyUserExistence"/&gt;
            &lt;Operation name="ProxyAuth"/&gt;
        &lt;/Operations&gt;
        &lt;Subsystems&gt;
            &lt;Subsystem name="sub1"/&gt;
            &lt;Subsystem name="sub2"/&gt;
        &lt;/Subsystems&gt;
    &lt;/Client&gt;
    
    &lt;Client name="sub1"&gt;
        &lt;DisplayName&gt;Subsystem 1&lt;/DisplayName&gt;
        &lt;URL&gt;http://www.feide.no/&lt;/URL&gt;
        &lt;Home&gt;uio.no&lt;/Home&gt;
        &lt;Language&gt;no&lt;/Language&gt;
        &lt;Affiliation&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/Affiliation&gt;
        &lt;OrgsAllowed&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/OrgsAllowed&gt;
        &lt;Attributes&gt;
            &lt;Attribute name="attr1" sso="true" secLevel="0"/&gt;
            &lt;Attribute name="attr2" sso="true" secLevel="1"/&gt;
            &lt;Attribute name="attr3" sso="false" secLevel="2"/&gt;
        &lt;/Attributes&gt;
        &lt;Operations&gt;
            &lt;Operation name="ProxyAuth"/&gt;
        &lt;/Operations&gt;
        &lt;Subsystems&gt;
        &lt;/Subsystems&gt;
    &lt;/Client&gt;
&lt;/ClientAuthorizationConfig&gt;
            </source>
        </section>
        <section name="Store Manager">
            <p>
            The Store Manager's configuration file must contain two
            properties:
            </p>
            <ul>
                <li>
                <code>no.feide.moria.store.cachestoreconf</code>
                <p>
                Should give the full path to the configuration file for
                JBossCache. The format of this file is defined in the
                <a href="http://www.jboss.com/products/jbosscache">JBossCache</a>
                documentation. The eviction policy configuration must be
                contained in this file. An example (partial) configuration is
                </p>
                <source>
&lt;Attribute name="EvictionPolicyClass"&gt;
    no.feide.moria.store.TicketTTLEvictionPolicy
&lt;/Attribute&gt;
&lt;Attribute name="EvictionPolicyConfig"&gt;
    &lt;Config&gt;
        &lt;Attribute name="wakeUpIntervalSeconds"&gt;60&lt;/Attribute&gt;
        &lt;Attribute name="maxNodes"&gt;200000&lt;/Attribute&gt;
        &lt;Region name="Login Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;375&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Service Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;375&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Single Sign-On Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;36000&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Ticket Granting Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;4500&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Proxy Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;750&lt;/Attribute&gt;
        &lt;/Region&gt;
    &lt;/Config&gt;
&lt;/Attribute&gt;
                </source>
                <p>
                Each regions' name match the actual name of the branch in the
                cache. The time to live is the time in seconds. The
                <i>wakeUpIntervalSeconds</i> attribute defines how often the
                thread doing the evictions should be run. The <i>maxNodes</i>
                attributes is required by the underlying API but isn't really
                used in this policy.
                </p>
                </li>
                <li>
                <code>no.feide.moria.store.real_ttl_percentage</code>
                <p>
                The percentage defining the actual ticket time to live. This is
                used to calculate the actual validity time of tickets. While the
                time defined in the eviction policy declaration defines the time
                the tickets will remain in the cache, the time the tickets are
                valid is a sub one multiple of this. For example, Service
                Tickets may be configured to stay in the cache for <i>m</i>
                seconds, but is considered valid for use only <i>n</i> percent
                of this period if the time to live percentage is set to
                <i>n</i>. Thus, the real TTL = <i>mn</i>/100.
                </p>
                </li>
            </ul>
            <p>
            Example Store Manager configuration file:
            </p>
            <source>
# The configuration for JBossCache:
no.feide.moria.store.cachestoreconf=/full/path/to/jboss-cache.xml

# The percentage defining the actual (or real) ticket time to live:
no.feide.moria.store.real_ttl_percentage=80
            </source>
        </section>
        <section name="Directory Manager">
            <p>
            The Directory Manager configuration consists of an XML file and
            an index file. The index file is actually an instance of
            <code>no.feide.moria.directory.index.SerializableIndex</code>
            written to file (using the tool
            <code>no.feide.moria.directory.index.tools.SerializableIndexCreator</code>,
            which is described in detail in the Directory Manager
            <a href="moria-dm/index.html">documentation</a>) which is in turn
            referenced from the Directory Manager configuration XML file.
            </p>
            <p>
            Two implementations of the Directory Manager backend exists; a JNDI
            backend, for accessing authentication servers (usually plain old
            LDAP servers) through JNDI, and a dummy backend, which can be
            configured to emulate one or more functioning authentication
            servers.
            </p>
            <p>
            Both backend implementations' configuration file contain one root
            <i>DirectoryManagerConfiguration</i> element. This in turn contains
            two child elements; the <i>Index</i> element and the <i>Backend</i>
            element.
            </p>
            <p>
            The <i>Index</i> element only has two attributes - <i>file</i>,
            giving the filename (absolute or relative path) of the previously
            mentioned <code>SerializableIndex</code> file, and <i>update</i>,
            which is the index update interval in seconds. The update will only
            occur if the timestamp of the index file has changed.
            </p>
            <p>
            The <i>Backend</i> element differs between backend implementations,
            but will always include one attribute, <i>class</i>, which states
            which backend implementation to use. Legal values are
            <code>no.feide.moria.directory.backend.DummyBackendFactory</code>
            and
            <code>no.feide.moria.directory.backend.JNDIBackendFactory</code>.
            The children of the Backend element varies depending on the
            implementation given by the <i>class</i> attribute.
            </p>
            <subsection name="Dummy Backend">
                <p>
                For the dummy backend, the <i>Backend</i> element must contain
                one <i>Dummy</i> child element. The <i>Dummy</i> element may
                contain one or more <i>User</i> child elements, with the
                attributes <i>name</i> (for the user's username) and
                <i>password</i> (for the user's password). The <i>User</i>
                element may contain one or more <i>Attribute</i> child elements,
                with the attribute <i>name</i> (for the attribute's name). The
                <i>Attribute</i> element must contain one or more <i>Value</i>
                child elements. The <i>Value</i> element must contain a text
                child element with an attribute value.
                </p>
                <p>
                Thus for the dummy backend it is possible to configure several
                users (with passwords) with several attributes that in turn may
                yield several values.
                </p>
                <p>
                An example Directory Manager configuration file using the dummy
                backend:
                </p>
                <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;DirectoryManagerConfiguration&gt;
    &lt;Index file="src/test/conf/DummyIndex.object"
           update="120"/&gt;
        &lt;Backend class="no.feide.moria.directory.backend.DummyBackendFactory"&gt;
            &lt;Dummy&gt;
                &lt;User name="user@some.realm"
                      password="password"&gt;
                    &lt;Attribute name="MyAttribute"&gt;
                        &lt;Value&gt;MyValue&lt;/Value&gt;
                    &lt;/Attribute&gt;
                &lt;/User&gt;
            &lt;/Dummy&gt;
        &lt;/Backend&gt;
&lt;/DirectoryManagerConfiguration&gt;
                </source>
                <p>
                In this example we have configured one user, with a
                single-valued attribute <i>MyAttribute</i>.
                </p>
            </subsection>
            <subsection name="JNDI Backend">
                <p>
                For the JNDI backend, the <i>Backend</i> element must contain
                one <i>JNDI</i> child element, with the attributes
                <i>timeout</i> (giving the timeout used when accessing
                authentication servers), <i>usernameAttribute</i> (used when
                trying to match a username to a given user), and
                <i>guessedAttribute</i> (used for guessing on the user
                Distinguished Name when searching fails). The <i>JNDI</i>
                element must contain one <i>Security</i> child element. The 
                <i>Security</i> element must contain one <i>Truststore</i> child
                element, with the attributes <i>filename</i> (relative or 
                absolute, to the file containing the truststore with
                authentication server or CA certificates), and <i>password</i>
                (to the truststore).
                </p>
                <p>
                Thus for the JNDI backend it is possible to configure how to
                access and search for users on an authentication server, and how
                to authenticate the authentication server itself.
                </p>
                <p>
                An example Directory Manager configuration file using the JNDI
                backend:
                </p>
                <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;DirectoryManagerConfiguration&gt;
    &lt;Index file="src/test/conf/TestIndex.object"
           update="120"/&gt;
    &lt;Backend class="no.feide.moria.directory.backend.JNDIBackendFactory"&gt;
        &lt;JNDI timeout="10"
              usernameAttribute="eduPersonPrincipalName"
              guessedAttribute="uid"&gt;
            &lt;Security&gt;
                &lt;Truststore filename="src/test/conf/moria.truststore"
                            password="changeit"/&gt;
            &lt;/Security&gt;
        &lt;/JNDI&gt;
    &lt;/Backend&gt;
&lt;/DirectoryManagerConfiguration&gt;
                </source>
            </subsection>
        </section>
        <section name="Logging">
            <p>
            Configuration of the log API is basically limited to producing a
            suitable log4j configuration. See log4j's 
            <a href="http://logging.apache.org/log4j/docs/documentation.html">documentation</a>
            and the distributed examples for more information.
            </p>
            <p>
            The only special case to consider is the access log. The logger's
            identifier will always the fully qualified path of the
            <code>AccessLogger</code> class itself. To isolate the access log it
            is therefore important to define the logger that catches the
            <code>AccessLogger</code> output before any other loggers catching
            output from the <code>no.feide.moria</code> hierarchy. Also, all
            logging from the <code>AccessLogger</code> is done at log4j level
            <code>WARN</code>, so to disable access logging define the log level
            at a higher level than this.
            </p>
        </section>
    </body>
</document>
