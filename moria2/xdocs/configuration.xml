<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2004 UNINETT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.

$Id$
-->
<document>
    <properties>
        <title>Configuration</title>
        <author email="cato.olsen@uninett.no">Cato Olsen</author>
    </properties>
    <body>
        <section name="Introduction">
            <p>
            Moria is software for providing authentication over HTTP using
            multiple directory backends. The software is designed with a
            servlet frontend both to the service provider and the user; the
            service frontend is SOAP based, and HTML is used for the
            interactive user interface.
            </p>
            <p>
            The authentication design is described in detail in the
            <a href="design.html">design document</a>.
            </p>
            <p>
            This document describes the configuration and setup of Moria
            from scratch.
            </p>
        </section>
        <section name="Presentation">
            <p>
            JSP is used for the user login and logout page and Moria ships
            with standard versions of both. In addition there's a number of
            other JSP used. These standard files are contained in the
            src/webapp/WEB-INF/jsp directory of the web module.
            </p>
            <p>
            There are two ways of replacing the standard JSP's. One can
            either replace the files when building the war or additionally
            add some new JSP's and provide a web.xml where the servlet
            definitions for the JSP's are redefined.
            </p>
            <p>
            A property named <code>project.alternative.jsp.location</code> will be used
            as source directory for JSP files if defined. All *.jsp files in
            this location will end up in the jsp directory in the war file.
            For ways to replace the default web.xml file see the Maven war
            plugin documentation.
            </p>
            <p>
            When replacing the JSP's one may also want to replace the
            language files. This can be done by redefining the property
            <code>project.resourcebundle.dir</code>, pointing it to a
            directory with replacement bundles.
            </p>
        </section>
        <section name="Base configuration">
            <p>
            Moria is dependent on three inital properties which has to be
            specified as system properties in the VM (or classloader if your
            appserver supports this functionality). The three are:
            <source>
# The configuration manager's property file
no.feide.moria.configuration.base=/full/path/to/configuration_managers.properties

# The node id. A three character alphanumeric string.
no.feide.moria.node.id=no1

# log4j's configuration
log4j.configuration=/full/path/to/log4j.xml
            </source>
            </p>
            <p>
            The last one may be considered optional as log4j on
            initialization has its own regime of locating the config, but
            this is the prefered way to do it when using Moria.
            </p>
        </section>
        <section name="Configuration manager">
            <p>
            <b>TODO: Required system property</b><br/>
            The Configuration Manager reads and watches the
            configuration file for all modules. When a module's
            configuration file is changed, the CM pushes the updated
            configuration to the module. Configuration files for all modules
            can be changed runtime without restart of Moria, but changes in
            the base configuration (CM config file) requires a restart of
            Moria.
            </p>
            <p>
            All file paths can be given as a <strong>full path or relative
            to the location of the base configuration file</strong>.
            </p>
            <source>
# Number of seconds between polling the configuration files
no.feide.moria.configuration.fileListenerIntervalSeconds=1

# Path to the store manager's configuration file.
no.feide.moria.configuration.sm=/full/path/to/store.properties

# Path to the directory manager's configuration file.
no.feide.moria.configuration.dm=../../directory.properties

# Path to the authorization manager's configuration file.
no.feide.moria.configuration.am=authorization.xml

# Path to the web module's configuration file.
no.feide.moria.configuration.web=web.properties
            </source>
        </section>
        <section name="Web module">
            <p>
            The web module's configuration consists mostly of language and
            cookie information used by the login and logout servlet. On the
            other hand the Axis servlet uses only the URL prefix and the
            ticket parameter name to generate a URL to the login page after
            the web service has initiated an authentication attempt.
            </p>
            <p>
            It is important that there exist a language bundle for the
            default language, else the the login and logout servlet will
            fail whenever they try to use the default language.
            </p>
            <p>
            Example configuration file:
            <source>
#
# Configuration properties for Moria2 itself:
#

# The URL of the login servlet.
no.feide.moria.web.login.url_prefix=http://localhost:8080/moria/Login

# The name of the parameter used to contain the redirect URL when logging out.
no.feide.moria.web.logout.url_param=redirUrl

# Abbreviations and display names for available languages.
no.feide.moria.web.lang_common=nb:Bokm&amp;aring;l,nn:Nynorsk,en:English

# Organization names when using the language EN.
no.feide.moria.web.org_en=uninett.no:UNINETT,uio.no:University of Oslo

# Organization names when using the language NB.
no.feide.moria.web.org_nb=uninett.no:UNINETT,uio.no:Universitetet i Oslo

# Organization names when using the language NN.
no.feide.moria.web.org_nn=uninett.no:UNINETT,uio.no:Universitetet i Oslo

# Name of URL parameter containing the Moria ticket ID.
no.feide.moria.web.login.ticket_param=moriaID

# Name of cookie used to disallow SSO.
no.feide.moria.web.cookie.denysso.name=MoriaDenySSOCookie

# Time to live, in hours, for cookie used to disallow SSO.
no.feide.moria.web.cookie.denysso.ttl=1

# Name of cookie used to carry SSO ticket ID.
no.feide.moria.web.cookie.sso.name=MoriaSSOCookie

# Time to live, in hours, for cookie used to carry SSO ticket ID.
no.feide.moria.web.cookie.sso.ttl=1

# Name of cookie used to store user's preferred language.
no.feide.moria.web.cookie.lang.name=MoriaUserLanguageCookie

# Time to live, in hours, for cookies used to store user's preferred language.
no.feide.moria.web.cookie.lang.ttl=1

# Default Moria language. Should match two-letter abbreviations from no.feide.moria.web.org_* properties.
no.feide.moria.web.login.default_language=nb

# Name of cookie used to store user's previously selected organization.
no.feide.moria.web.cookie.org.name=MoriaUserOrganizationCookie

# Time to live, in hours, for cookies used to store user's previously selected organization.
no.feide.moria.web.cookie.org.ttl=1


#
# Configuration properties relevant for the demo service (DemoServlet):
#

# Used to construct the QName for mapping remote Attribute type to local type.
no.feide.moria.web.demo.attributeNamespaceURI=https://login.feide.no/moria/v2_0/Authentication

# The service endpoint.
no.feide.moria.web.demo.serviceEndpoint=http://localhost:8080/moria/v2_0/Authentication

# A comma-separated list of attributes requested by the main service.
no.feide.moria.web.demo.master.attributeRequest=eduPersonOrgDN,tgt

# The username used by DemoServlet to access Moria2 as a main service.
no.feide.moria.web.demo.master.username=demo_service

# The password used by DemoServlet to access Moria2 as a main service.
no.feide.moria.web.demo.master.password=demo_service

# A comma-separated list of attributes requested by the subservice.
no.feide.moria.web.demo.slave.attributeRequest=eduPersonAffiliation

# The username used to access Moria2 as a subservice.
no.feide.moria.web.demo.slave.username=demo_subsystem

# The password used to access Moria2 as a subservice.
no.feide.moria.web.demo.slave.password=demo_subsystem
            </source>
            </p>
        </section>
        <section name="Authorization manager">
            <p>
            The Authorization Manager is configured by an XML file which
            contains a <i>ClientAuthorizationConfig</i> element, which contains
            a <i>Client</i> element for every web service allowed to use Moria.
            Service authentication is performed outside of Moria so password
            and/or certificates must be configured in the server that performs
            the authentication (for example, Apache).
            </p>
            <p>
            <a href="authorization.dtd">DTD for the authorization configuration file</a>.
            </p>
            <p>
            A <i>Client</i> element consists of the following:
            <ol>
                <li>
                A required <i>name</i> attribute which is the same as the
                principal used for the external authentication.
                </li>
                <li>
                A <i>DisplayName</i> element that contains the full name
                to the web service. This is the name that presented on
                the login page.
                </li>
                <li>
                An <i>URL</i> element which points to the main page of the
                web service. This URL is used to connect a link to the
                displayed web service name on the login page.
                </li>
                <li>
                A <i>Home</i> element that specifies which organization the web
                service belongs to. <i>This element is not currently in use, but
                should be present for future authorization use.</i>
                </li>
                <li>
                <i>Language</i> gives the language used on the
                web service's web interface. This language will be used as
                default language for the login page if the user has not
                selected another language.
                </li>
                <li>
                <i>Affiliation</i>  is used to connect the service with a group
                of organizations. The element contains <i>Organization</i>
                elements containing the short name of each affiliated
                organization. It is not to list the home organization as a
                affiliated organization. <i>The </i>Affiliation<i> element is
                not currently in use, but should be present for future
                authorization use.
                </i>
                </li>
                <li>
                <i>OrgsAllowed</i> is used to determine the organizations which
                are allowed to use a specific service. The element contains
                <i>Organization</i> elements that contains the short name of each
                organization that can use the service.
                </li>
                <li>
                <i>Attributes</i> contains the attributes that the web
                service is granted access to. The element contains
                <i>Attribute</i> elements that contains the attribute
                name, specification for SSO usage and security level.
                <i>sso</i> can be set to true or false and
                <i>secLevel</i> must be &gt;= 0. The <i>secLevel</i>
                attribute is used for classifying an attribute request
                and display a warning/description to the user on the
                login page.
                </li>
                <li>
                The <i>Operations</i> element contains <i>Operation</i>
                elements for all operations the web service is allowed
                to perform. The following operations are implemented in
                Moria:
                <table>
                    <tr>
                        <th>Operation</th>
                        <th>Explanation</th>
                    </tr>
                    <tr>
                        <td>InteractiveAuth</td>
                        <td>Normal interactive authentication</td>
                    </tr>
                    <tr>
                        <td>DirectAuth</td>
                        <td>The user sends username/password through the
                            web service</td>
                    </tr>
                    <tr>
                        <td>ProxyAuth</td>
                        <td>Authentication using a proxy ticket</td>
                    </tr>
                    <tr>
                        <td>VerifyUserExistence</td>
                        <td>Allow the web service to check for user existence</td>
                    </tr>
                </table>
                </li>
                <li>
                The <i>Subsystems</i> element contains a
                <i>Subsystem</i> element for every service/client the
                client is allowed to use proxy authentication with. Each
                sub system must be configured as a client with the
                <i>proxy operation</i>.
                </li>
            </ol>
            </p>
            <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;ClientAuthorizationConfig&gt;
    &lt;Client name="test"&gt;
        &lt;DisplayName&gt;Foobar&lt;/DisplayName&gt;
        &lt;URL&gt;http://www.feide.no/&lt;/URL&gt;
        &lt;Home&gt;uio.no&lt;/Home&gt;
        &lt;Language&gt;no&lt;/Language&gt;
        &lt;Affiliation&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/Affiliation&gt;
        &lt;OrgsAllowed&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
       &lt;/OrgsAllowed&gt;        
        &lt;Attributes&gt;
            &lt;Attribute name="attr1" sso="true" secLevel="0"/&gt;
            &lt;Attribute name="attr2" sso="true" secLevel="1"/&gt;
            &lt;Attribute name="attr3" sso="false" secLevel="2"/&gt;
            &lt;Attribute name="tgt" sso="false" secLevel="0"/&gt;
        &lt;/Attributes&gt;
        &lt;Operations&gt;
            &lt;Operation name="DirectAuth"/&gt;
            &lt;Operation name="InteractiveAuth"/&gt;
            &lt;Operation name="VerifyUserExistence"/&gt;
            &lt;Operation name="ProxyAuth"/&gt;
        &lt;/Operations&gt;
        &lt;Subsystems&gt;
            &lt;Subsystem name="sub1"/&gt;
            &lt;Subsystem name="sub2"/&gt;
        &lt;/Subsystems&gt;
    &lt;/Client&gt;
    
    &lt;Client name="sub1"&gt;
        &lt;DisplayName&gt;Subsystem 1&lt;/DisplayName&gt;
        &lt;URL&gt;http://www.feide.no/&lt;/URL&gt;
        &lt;Home&gt;uio.no&lt;/Home&gt;
        &lt;Language&gt;no&lt;/Language&gt;
        &lt;Affiliation&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/Affiliation&gt;
        &lt;OrgsAllowed&gt;
            &lt;Organization name="uninett.no"/&gt;
            &lt;Organization name="uio.no"/&gt;
        &lt;/OrgsAllowed&gt;
        &lt;Attributes&gt;
            &lt;Attribute name="attr1" sso="true" secLevel="0"/&gt;
            &lt;Attribute name="attr2" sso="true" secLevel="1"/&gt;
            &lt;Attribute name="attr3" sso="false" secLevel="2"/&gt;
        &lt;/Attributes&gt;
        &lt;Operations&gt;
            &lt;Operation name="ProxyAuth"/&gt;
        &lt;/Operations&gt;
        &lt;Subsystems&gt;
        &lt;/Subsystems&gt;
    &lt;/Client&gt;
&lt;/ClientAuthorizationConfig&gt;<br/>
            </source>
        </section>
        <section name="Store manager">
            <p>
            The store managers configuration file must contain two
            properties.
            <source>
# The configuration for JBossCache:
no.feide.moria.store.cachestoreconf=/full/path/to/jboss-cache.xml

# The percentage defining the actual (or real) ticket time to live:
no.feide.moria.store.real_ttl_percentage=80
            </source>
            </p>
            <p>
            The first points to the JBoss Cache specific configuration file.
            The format of this file is defined in the
            <a href="http://www.jboss.com/products/jbosscache">JBossCache</a>
            documentation. The eviction policy configuration must be contained
            in this file. An example configuration is
            <source>
&lt;Attribute name="EvictionPolicyClass"&gt;
    no.feide.moria.store.TicketTTLEvictionPolicy
&lt;/attribute&gt;
&lt;Attribute name="EvictionPolicyConfig"&gt;
    &lt;Config&gt;
        &lt;Attribute name="wakeUpIntervalSeconds"&gt;60&lt;/Attribute&gt;
        &lt;Attribute name="maxNodes"&gt;200000&lt;/Attribute&gt;
        &lt;Region name="Login Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;375&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Service Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;375&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Single Sign-On Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;36000&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Ticket Granting Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;4500&lt;/Attribute&gt;
        &lt;/Region&gt;
        &lt;Region name="Proxy Ticket"&gt;
            &lt;Attribute name="timeToLive"&gt;750&lt;/Attribute&gt;
        &lt;/Region&gt;
    &lt;/Config&gt;
&lt;/Attribute&gt;
            </source>
            Each regions' name match the actual name of the branch in the
            cache. The time to live is the time in seconds. The
            <i>wakeUpIntervalSeconds</i> attribute defines how often the
            thread doing the evictions should be run. The <i>maxNodes</i>
            attributes is required by the underlying API but isn't really
            used in this policy.
            </p>
            <p>
            The second property, the real TTL percentage, is used to
            calculate the actual validity time of tickets. While the time
            defined in the eviction policy declaration defines the time the
            tickets will remain in the cache, the time the tickets are valid
            is a sub one multiple of this. For example, Service Tickets stay in
            the cache for 375 seconds, but is considered valid for use only 80
            percent of this period (which calculates to: 375 * 0.8 = 300
            seconds or 5 minutes).
            </p>
        </section>
        <section name="Directory Manager (moria-dm)">
            <p>
            The Directory Manager configuration consists of an XML file and
            an index file. The index file is actually an instance of
            <code>no.feide.moria.directory.index.SerializableIndex</code>
            written to file (using the tool
            <code>no.feide.moria.directory.index.tools.SerializableIndexCreator</code>,
            which is described in detail in the Directory Manager
            <a href="moria-dm/index.html">documentation</a>) which is in turn referenced
            from the Directory Manager configuration XML file.
            </p>
            <p>
            Two implementations of the Directory Manager backend exists; a
            JNDI backend, for accessing authentication servers (usually
            plain old LDAP servers) through JNDI, and a dummy backend, which
            can be configured to emulate one or more functioning
            authentication servers.
            </p>
            <p>
            Both backend implementations' configuration file contain one root
            <i>DirectoryManagerConfiguration</i> element. This in turn
            contains two child elements; the <i>Index</i> element and the
            <i>Backend</i> element.
            </p>
            <p>
            The <i>Index</i> element only has two attributes - <i>file</i>,
            giving the filename (absolute or relative path) of the previously
            mentioned <code>SerializableIndex</code> file, and <i>update</i>, which
            is the index update interval in seconds. The update will only occur
            if the timestamp of the index file has changed.
            </p>
            <p>
            The <i>Backend</i> element differs between backend
            implementations, but will always include one attribute,
            <i>class</i>, which states which backend implementation to use.
            Legal values are
            <code>no.feide.moria.directory.backend.DummyBackendFactory</code>
            and
            <code>no.feide.moria.directory.backend.JNDIBackendFactory</code>.
            The children of the Backend element varies depending on the
            implementation given by the <i>class</i> attribute.
            </p>
            <subsection name="Dummy Backend">
                <p>
                For the dummy backend, the <i>Backend</i> element must contain
                one <i>Dummy</i> child element. The <i>Dummy</i> element may
                contain one or more <i>User</i> child elements, with the
                attributes <i>name</i> (for the user's username) and
                <i>password</i> (for the user's password). The <i>User</i>
                element may contain one or more <i>Attribute</i> child elements,
                with the attribute <i>name</i> (for the attribute's name). The
                <i>Attribute</i> element must contain one or more <i>Value</i>
                child elements. The <i>Value</i> element must contain a text
                child element with an attribute value.
                </p>
                <p>
                Thus for the dummy backend it is possible to configure several
                users (with passwords) with several attributes that in turn may
                yield several values.
                </p>
                <p>
                An example configuration is
                </p>
                <source>
    &lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
    &lt;DirectoryManagerConfiguration&gt;
        &lt;Index file="src/test/conf/DummyIndex.object"
               update="120"/&gt;
            &lt;Backend class="no.feide.moria.directory.backend.DummyBackendFactory"&gt;
                &lt;Dummy&gt;
                    &lt;User name="user@some.realm"
                          password="password"&gt;
                        &lt;Attribute name="MyAttribute"&gt;
                            &lt;Value&gt;MyValue&lt;/Value&gt;
                        &lt;/Attribute&gt;
                    &lt;/User&gt;
                &lt;/Dummy&gt;
            &lt;/Backend&gt;
    &lt;/DirectoryManagerConfiguration&gt;
                </source>
                <p>
                In this example we have configured one user, with a single-valued
                attribute <i>MyAttribute</i>.
                </p>
            </subsection>
            <subsection name="JNDI Backend">
                <p>
                For the JNDI backend, the <i>Backend</i> element must contain one
                <i>JNDI</i> child element, with the attributes <i>timeout</i>
                (giving the timeout used when accessing authentication servers),
                <i>usernameAttribute</i> (used when trying to match a username
                to a given user), and <i>guessedAttribute</i> (used for guessing
                on the user Distinguished Name when searching fails). The
                <i>JNDI</i> element must contain one <i>Security</i> child
                element. The <i>Security</i> element must contain one
                <i>Truststore</i> child element, with the attributes
                <i>filename</i> (relative or absolute, to the file containing
                the truststore with authentication server or CA certificates),
                and <i>password</i> (to the truststore).
                </p>
                <p>
                Thus for the JNDI backend it is possible to configure how to
                access and search for users on an authentication server, and how
                to authenticate the authentication server itself. An example
                configuration is
                </p>
                <source>
    &lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
    &lt;DirectoryManagerConfiguration&gt;
        &lt;Index file="src/test/conf/TestIndex.object"
               update="120"/&gt;
        &lt;Backend class="no.feide.moria.directory.backend.JNDIBackendFactory"&gt;
            &lt;JNDI timeout="10"
                  usernameAttribute="eduPersonPrincipalName"
                  guessedAttribute="uid"&gt;
                &lt;Security&gt;
                    &lt;Truststore filename="src/test/conf/moria.truststore"
                                password="changeit"/&gt;
                &lt;/Security&gt;
            &lt;/JNDI&gt;
        &lt;/Backend&gt;
    &lt;/DirectoryManagerConfiguration&gt;
                </source>
            </subsection>
        </section>
        <section name="Logging">
            <p>
            Configuration of the log API is basically limited to producing a
            suitable log4j configuration. See log4j's 
            <a href="http://logging.apache.org/log4j/docs/documentation.html">documentation</a>
            and the distributed examples for more information.
            </p>
            <p>
            The only special case to consider is the access log. The
            logger's identifier will always the fully qualified path of the
            <code>AccessLogger</code> class itself. To isolate the access log
            it's therefore important to define the logger that catches the
            <code>AccessLogger</code> output before any other loggers catching
            output from the <code>no.feide.moria</code> hierarchy. Also, all logging
            from the <code>AccessLogger</code> is done at log4j level <tt>WARN</tt>,
            so to disable access logging define the log level at a higher level
            than this.
            </p>
        </section>
    </body>
</document>
