<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2004 UNINETT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.

$Id$
-->
<document>
    <properties>
        <title>Configuration - Directory Manager</title>
        <author email="cato.olsen@uninett.no">Cato Olsen</author>
    </properties>
    <body> 
        <section name="Directory Manager">
            <p>
            The Directory Manager configuration consists of an XML file and
            an index file. The index file is actually an instance of
            <code>no.feide.moria.directory.index.SerializableIndex</code>
            written to file (using the tool
            <code>no.feide.moria.directory.index.tools.SerializableIndexCreator</code>,
            described in detail in the 
            <a href="moria-dm/index.html">Directory Manager</a> module
            description, which is in turn referenced from the Directory Manager
            configuration XML file.
            </p>
            <p>
            Two implementations of the Directory Manager backend exists; a JNDI
            backend, for accessing authentication servers (usually plain old
            LDAP servers) through JNDI, and a dummy backend, which can be
            configured to emulate one or more functioning authentication
            servers.
            </p>
            <p>
            Both backend implementations' configuration file contain one root
            <i>DirectoryManagerConfiguration</i> element. This in turn contains
            two child elements; the <i>Index</i> element and the <i>Backend</i>
            element.
            </p>
            <p>
            The <i>Index</i> element only has two attributes - <i>file</i>,
            giving the filename (absolute or relative path) of the previously
            mentioned <code>SerializableIndex</code> file, and <i>update</i>,
            which is the index update interval in seconds. The update will only
            occur if the timestamp of the index file has changed.
            </p>
            <p>
            The <i>Backend</i> element differs between backend implementations,
            but will always include one attribute, <i>class</i>, which states
            which backend implementation to use. Legal values are
            <code>no.feide.moria.directory.backend.DummyBackendFactory</code>
            and
            <code>no.feide.moria.directory.backend.JNDIBackendFactory</code>.
            The children of the Backend element varies depending on the
            implementation given by the <i>class</i> attribute.
            </p>
            <subsection name="Dummy Backend">
                <p>
                For the dummy backend, the <i>Backend</i> element must contain
                one <i>Dummy</i> child element. The <i>Dummy</i> element may
                contain one or more <i>User</i> child elements, with the
                attributes <i>name</i> (for the user's username) and
                <i>password</i> (for the user's password). The <i>User</i>
                element may contain one or more <i>Attribute</i> child elements,
                with the attribute <i>name</i> (for the attribute's name). The
                <i>Attribute</i> element must contain one or more <i>Value</i>
                child elements. The <i>Value</i> element must contain a text
                child element with an attribute value.
                </p>
                <p>
                Thus for the dummy backend it is possible to configure several
                users (with passwords) with several attributes that in turn may
                yield several values.
                </p>
                <p>
                An example Directory Manager configuration file using the dummy
                backend:
                </p>
                <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;DirectoryManagerConfiguration&gt;
    &lt;Index file="src/test/conf/DummyIndex.object"
           update="120"/&gt;
        &lt;Backend class="no.feide.moria.directory.backend.DummyBackendFactory"&gt;
            &lt;Dummy&gt;
                &lt;User name="user@some.realm"
                      password="password"&gt;
                    &lt;Attribute name="MyAttribute"&gt;
                        &lt;Value&gt;MyValue&lt;/Value&gt;
                    &lt;/Attribute&gt;
                &lt;/User&gt;
            &lt;/Dummy&gt;
        &lt;/Backend&gt;
&lt;/DirectoryManagerConfiguration&gt;
                </source>
                <p>
                In this example we have configured one user, with a
                single-valued attribute <i>MyAttribute</i>.
                </p>
            </subsection>
            <subsection name="JNDI Backend">
                <p>
                For the JNDI backend, the <i>Backend</i> element must contain
                one <i>JNDI</i> child element, with the attributes
                <i>timeout</i> (giving the timeout, in seconds, used when accessing
                authentication servers), <i>usernameAttribute</i> (used when
                trying to match a username to a given user), and
                <i>guessedAttribute</i> (used for guessing on the user
                Distinguished Name when searching fails). The <i>JNDI</i>
                element must contain one <i>Security</i> child element. The 
                <i>Security</i> element must contain one <i>Truststore</i> child
                element, with the attributes <i>filename</i> (relative or 
                absolute, to the file containing the truststore with
                authentication server or CA certificates), and <i>password</i>
                (to the truststore).
                </p>
                <p>
                Thus for the JNDI backend it is possible to configure how to
                access and search for users on an authentication server, and how
                to authenticate the authentication server itself.
                </p>
                <p>
                An example Directory Manager configuration file using the JNDI
                backend:
                </p>
                <source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?&gt;
&lt;DirectoryManagerConfiguration&gt;
    &lt;Index file="src/test/conf/TestIndex.object"
           update="120"/&gt;
    &lt;Backend class="no.feide.moria.directory.backend.JNDIBackendFactory"&gt;
        &lt;JNDI timeout="10"
              usernameAttribute="eduPersonPrincipalName"
              guessedAttribute="uid"&gt;
            &lt;Security&gt;
                &lt;Truststore filename="src/test/conf/moria.truststore"
                            password="changeit"/&gt;
            &lt;/Security&gt;
        &lt;/JNDI&gt;
    &lt;/Backend&gt;
&lt;/DirectoryManagerConfiguration&gt;
                </source>
            </subsection>
            <subsection name="Index">
            	<p>
            	The index configuration file, used to generate the actual index
            	file, consists of a root <i>Index</i> element. The <i>Index</i>
            	element may contain one or more <i>Associations</i> and/or
            	<i>Exceptions</i> children.
            	</p>
            	<p>
            	The <i>Associations</i> element contains one or more
            	<i>Realm</i> children, each with an attribute <i>name</i>
            	giving the logical realm name for the user's falling into this
            	realm. This assumes usernames on the form
            	<i>identity</i>@<i>realm</i>, where the realm's <i>name</i>
            	attribute is the latter part. Each <i>Realm</i> element may
            	contain one or more <i>Base</i> children. Each <i>Base</i> has
            	the attributes <i>name</i>, giving a potential LDAP search base
            	for this realm, as well as the two optional attributes
            	<i>username</i> and <i>password</i>. These latter two, if
            	specified, are to be used when searching for the user elements's
            	actual DN in case the LDAP server does not allow anonymous
            	searching.
            	</p>
            	<p>
            	The <i>Exceptions</i> elements contain no children, but the
            	attributes <i>id</i>, giving the full username (which may not
            	be on the form <i>identity</i>@<i>realm</i>) of a user;
            	<i>reference</i>, giving the full reference to the user element;
            	and <i>realm</i>, giving the actual realm the user belongs to -
            	this allows for users to retain the usernames even when moving
            	between organizations (each with its own realm).
            	</p>
            	<p>
            	Together, <i>Associations</i> map a group of users to one or
            	more search bases based on their realm membership, while
            	<i>Exceptions</i> give a one-to-one mapping between usernames
            	and search bases.
            	</p>
            	<p>
            	An example index configuration file is shown below:
            	</p>
				<source>
&lt;?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

&lt;-- 

A sample index file, with two associations for the same realm and one exception.
This file is used to create and write a SerializableIndex object to file, using
tools such as no.feide.moria.directory.index.tools.SerializableIndexCreator.

More than one base ("implicit reference") may be associated with the same realm,
but only one reference ("explicit reference") may be associated with any given
user ID.

-->

&lt;Index>

    &lt;!--
	     Associate the realm some.realm with two different search bases, using SSL (port 636).
	     The last base requires a username/password to perform initial bind for user DN searching.
    -->
 	&lt;Associations>
		&lt;Realm name="some.realm">
			&lt;Base name="ldap://some.ldap.server:636/ou=users,dc=some,dc=where"/>
			&lt;Base name="ldap://some.ldap.server:636/ou=people,dc=some,dc=where" username="access" password="please"/>			
  		&lt;/Realm>
	&lt;/Associations>  		
	
    &lt;!--
	     Associate the user ID with one user element reference, using SSL (port 636).
	     This will override the above association. The "realm" attribute is used to
	     tie the user to a given organization, for authorization purposes.
    -->	
	&lt;Exception id="user@some.realm" reference="ldap://another.ldap.server:636/uid=user,ou=people,dc=another,dc=place" realm="some.realm"/>	
	
&lt;/Index&gt;
				</source>
				<p>
				The tool used to generate the index object based on such a file
				is given in the class
				<a href="moria-dm/apidocs/no/feide/moria/directory/index/tools/SerializableIndexCreator.html">SerializableIndexCreator</a>.
            	</p>
            </subsection>
        </section>
    </body>
</document>
