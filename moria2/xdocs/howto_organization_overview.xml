<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2004 UNINETT

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.
-->

<document>

	<properties>
		<title>Authentication Servers</title>
		<author email="cato.olsen@uninett.no">Cato Olsen</author>
	</properties>
	
	<body>
		<section name="Authentication Servers">
			<p>
			Moria2 uses an organization's authentication server to perform the
			actual user authentication, as well as a data source for user
			attributes.
			</p>
			<p>
			The protocol used to communicate with these authentication
			servers is LDAP; the authentication server is an LDAP server, but the
			neutral term <em>authentication server</em> will be used since support for
			other protocols may be introduced at some time. This section will outline
			the requirements placed on an <em>LDAP</em> authentication server.
			</p>
			
			<subsection name="SSL Preparations">
			<p>
			Accessing an authentication server through unencrypted LDAP has not
			been tested, and is not recommended for security reasons. The normal
			mode of operation is to use LDAPS.
			</p>
			<p>
			Moria2 does not support client-side authentication through SSL when
			accessing the authentication server; that is, Moria2 does not use
			a client certificate.
			</p>
			<p>
			The authentication server's owner must provide the Moria2 administrator
			with the CA certificate used to sign the authentication server's certificate,
			or, less preferably, the authentication server's certificate itself.
			</p>
			</subsection>
			
			<subsection name="Indexing Information">
			<p>
			Following a successful connection and SSL handshake with an authentication
			server, Moria2 will perform a subtree search to resolve the username
			into a user element Distinguished Name (DN) for subsequent user authentication.
			</p>
			<p>
			The following information is needed from the authentication server's
			owner:
			<ul>
				<li>
				Authentication server hostname, for example <tt>ldap.my.org</tt>.
				</li>
				<li>
				Authentication server LDAPS port, for example <tt>80636</tt>.
				</li>
				<li>
				LDAP search base, for example <tt>dc=users,dc=my,dc=org</tt>.
				</li>
			</ul>
			The above information can be written as an LDAP URL on the form
			<pre>ldaps://ldap.my.org:80636/dc=users,dc=my,dc=org</pre>
			</p>
			<p>
			This information is then linked to a realm identifier through what is
			called implicit indexing; in the example above this identifier would
			typically be <tt>my.org</tt>, and a user from this organization might
			have a username on the form <tt>someuser@my.org</tt>. However, this
			depends on the realm policy of the Moria2 instance's user base and may
			take other forms as long as the basic <i>identity@realm</i> pattern
			is preserved.
			</p>
			<p>
			Moria2 will by default perform an anonymous search for the user
			element. However, if the authentication server does not allow for
			anonymous searches from the search base described above, the
			authentication server's owner must provide the Moria2 administrator with
			the credentials required to do a non-anonymous search:
			<ul>
				<li>
				A bind DN ("username").
				</li>
				<li>
				A bind password.
				</li>
			</ul>
			Using these credentials Moria2 will do an LDAP simple bind to the
			authentication server prior to searching for the user element.
			</p>
			<p>
			Also, Moria2 may have more than one entry for each organization;
			that is, for an organization <tt>my.org</tt> Moria2 may be configured
			to search for users using more than one LDAP URL. As a result, one
			organization may employ more than one search base, and even more than
			one LDAP authentication server. If this is the case, each LDAP URL
			will be searched through in sequence.
			</p>
			<p>
			As can be seen in the <a href="config_directory_manager.html">Directory
			Manager</a>'s configuration documentation, Moria2 also supports
			explicit indexing, but this is outside the scope of this overview.
			</p>
			</subsection>
			
			<subsection name="Authentication Server Requirements">
			<p>
			The LDAP authentication server and its user elements must conform
			to the following rules:
			</p>
			<ul>
				<li>
				Each user element must have an attribute containing the username.
				Moria2 may be configured to use an arbitrary attribute as username;
				contact the Moria2 administrator to learn what the correct attribute
				for usernames should be. The usernames must be on the form given by
				<i>localID@organization</i>, where <i>localID</i> should be unique
				within the organization, and the realm <i>organization</i> is the
				organization short-form identifier described in
				<a href="#Indexing_Information">this</a> section.
				</li>
				<li>
				The server must <b>either</b> allow Moria2 to do a subtree equality search (at
				least non-anonymous; see <a href="#Indexing_Information">this</a>
				section) for the attribute containing the username, <b>or</b>
				have user element DNs on the form
				<pre>
				DN=<i>localID</i>,<i>LDAP search base</i>
				</pre>
				where <i>localID</i> can be extracted from a username on the
				form <i>localID@organization</i>.
				</li>
				<li>
				The server must allow LDAP simple bind using the user element's DN and the user's
				password.
				</li>
				<li>
				The server must allow reading of attributes from the user element given by DN
				following a simple bind using the DN itself.
				</li>
			</ul>
			<p>
			Optimally, Moria2 should be able to do an equality subtree
			search for a user element's DN and then perform a non-anonymous simple
			bind using this DN. Unless the DN contains sensitive user data the
			initial search phase could potentially be done as an anonymous search.
			</p>
			</subsection>
			
		</section>
	</body>
	
</document>
