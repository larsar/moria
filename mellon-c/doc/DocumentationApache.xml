<?xml version="1.0" standalone="no" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article>
<artheader>
  <title>The auth_mellon module for Apache 2.0</title>
  <author>
    <firstname>Øyvind</firstname>
    <surname>Grønnesby</surname>
  </author>
</artheader>
<section><title>Introduction</title>
  <para>
    mod_auth_mellon is an authentication module for Apache built on top of the
    libmellon library (distributed with this document).  It works in a simple
    fashion, redirecting users to a webpage at login.feide.no where the users
    can authenticate themselves with username and password before being
    redirected back to the resource they requested before authentication.
  </para>
  <para>
    This document contains instruction on how to install the software and
    how to configure it with Apache.
  </para>
</section>
<section><title>Installation</title>
  <section><title>Requirements</title>
    <itemizedlist>
      <listitem><para>Apache 2.0 with DSO support</para></listitem>
      <listitem><para>A C compiler</para></listitem>
      <listitem><para>make</para></listitem>
      <listitem><para>Perl</para></listitem>
      <listitem><para>An OS that supports anonymous shared memory</para></listitem>
    </itemizedlist>
  </section>
  <section><title>Summary</title>
    <orderedlist>
      <listitem><para><userinput>cd src</userinput></para></listitem>
      <listitem><para><userinput>make libmellon.a</userinput></para></listitem>
      <listitem><para><userinput>cd ../apache</userinput></para></listitem>
      <listitem>
        <para>
	  Edit Makefile to suit your system.  You should only need to change
	  the variable that say where APXS is.
	</para>
      </listitem>
      <listitem><para><userinput>make</userinput></para></listitem>
      <listitem><para><userinput>$PATH_TO_APACHE/bin/apxs -i -a -n auth_mellon mod_auth_mellon.la</userinput></para></listitem>
    </orderedlist>
  </section>
</section>
<section><title>Configuration</title>
  <section><title>MellonVariable</title>
    <para>
      FEIDE works by redirecting users to the authentication service, and
      getting redirected back.  auth_mellon knows that the user has been
      authenticated when a GET variable is added to the URL that the
      user requests.  The webserver can decide the name of this variable,
      and it is set with MellonVariable.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonVariable id</userinput></para>
    </section>
  </section>
  <section><title>MellonUrl</title>
    <para>
      The URL to the authentication service.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonUrl https://login.feide.no/moria/Authentication</userinput></para>
    </section>
  </section>
  <section><title>MellonServerUser</title>
    <para>
      The authentication service uses HTTP Basic Authentication to protect
      access to it from different clients (client like auth_mellon).  This
      sets the authentication username.
    </para>
    <para>
      You will probably have been given a value to put here by the
      authentication service administrators.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonServerUser uio</userinput></para>
    </section>
  </section>
  <section><title>MellonServerPassword</title>
    <para>
      The HTTP Basic Authentication password to go with MellonServerUser.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonServerPassword turnips</userinput></para>
    </section>
  </section>
  <section><title>MellonDomain</title>
    <para>
      To separate between different resources that need authentication
      you set different MellonDomains for the resources.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonDomain internweb</userinput></para>
    </section>
  </section>

  <section><title>MellonRequire</title>
    <para>
      This controls access for "authenticated" users.  When they are being
      redirected from the authentication service to the resource they
      requested, auth_mellon will query the authentication service for
      attributes that contain information about the user.  Then they will
      be matched against the different MellonRequire statements.
      MellonRequire takes multiple arguments, where the first argument is
      always the name of the attribute followed by a list of values.  There
      is an implicit OR between the different values in the list.  If you
      want to have an AND between the different values, you would have to
      put them on separate lines (yes, multiple MellonRequire statements are
      allowed).
    </para>
    <section><title>Example</title>
      <para><userinput>MellonRequire eduPersonAffiliation student</userinput></para>
    </section>
  </section>

  <section><title>MellonCacheSize</title>
    <para>
      The auth_mellon module will cache authentications locally so that
      the user won't have to be redirected to the authentication service
      for each request.  MellonCacheSize says how many authentications the
      server will cache.  Note that unlike the above configuration directives
      this is for the whole server.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonCacheSize 500</userinput></para>
    </section>
  </section>
  <section><title>MellonCacheAge</title>
    <para>
      How long the cached authentications be valid.
      This is also a global configuration directive.  The value is given
      in seconds.
    </para>
    <section><title>Example</title>
      <para><userinput>MellonCacheAge 300</userinput></para>
    </section>
  </section>
</section>
<section><title>Configuration example</title>
<screen>
MellonCacheSize 500     # 500 authorizations will be cached
MellonCacheAge  250     # a cached auth will be valid 250 seconds

&lt;Directory "/home/www/htdocs/secret"&gt;
  MellonVariable id
  MellonUrl https://login.feide.no/moria/Authentication
  MellonServerUser server_user
  MellonServerPassword sekrit
  MellonRequire eduPersonAffiliation student employee
  MellonDomain "Secret stuff"
&lt;/Directory&gt;
</screen>
</section>
</article>
